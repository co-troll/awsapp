name: last nest build # 현재 제목

on: # 이벤트를 등록
  push: # push 이벤트가 발생하면
    branches: # branches 어떤 브랜치에 이벤트가 일어났을때 작업을 동작시킨다.
      - main

jobs: # 작업의 단위
  Build: # 식별자
    runs-on: ubuntu-latest # 러너에서 사용할 os

    steps: # 작업의 가장 작은 단위
      - name: checkout # 작업의 작은 단위의 이름
        uses: actions/checkout@v4 # 레포지토리를 체크아웃 할수 있게 도와주는 라이브러리

      - name: set up node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: test # 의존성을 설치하기 전에 폴더 구조 확인
        run: |
          ls
          pwd
      
      - name: npm install # 의존성 설치
        run: npm install

      - name: build nestjs # 빌드
        run: npm run build

      - name: build test # 빌드 파일 확인
        run: |
          ls
          pwd
          cd dist
          ls
          pwd
        
      # 러너에 빌드된 파이과 의존성들이 있는 상태 빌드 서버
      # 운영 배포 서버에 전송해줘야한다
      - name: upload build
        uses: actions/upload-artifact@v4 # 빌드 결과물 저장, 빌드된 바이너리 패키지 
        with:
          name: build-artifact
          path: |
            dist/
            package.json
            package-lock.json
            system.config.js

      # 운영 서버에 전송 ec2에 파일을 전송
      # ssh
      - name: ssh key create
        run: |
          mkdir -p ~/.ssh
          ls
          pwd
          echo ${{ secrets.AWS_SECRET_KEY }} > ~/.ssh/aws_key
          chmod 600 ~/.ssh/aws_key
          ssh-keyscan -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts
          cat ~/.ssh/known_hosts

      # 배포 주닙단계 배포하기 전에 생성할 폴더 및 파일 확인
      # script는 et 운영 서버에서 실행할 쉘 스킓트 내용
      # ec2 가상 서버에서 실행될 내용
      - name: ec2 deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.AWS_SECRET_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            cd ~
            rm -rf dist
            mkdir dist
            rm -rf package.json
            rm -rf package-lock.json
            rm -rf system.config.js

      - name: ec2 copy arifact
        run: |
          scp -r -i ~/.ssh/aws_key ./dist/* ${{ secrets.USERNAME }}@${{ secrets.HOST }}:/home/ubuntu/dist/
          scp -i ~/.ssh/aws_key package.json ${{ secrets.USERNAME }}@${{ secrets.HOST }}:/home/ubuntu/
          scp -i ~/.ssh/aws_key package-lock.json ${{ secrets.USERNAME }}@${{ secrets.HOST }}:/home/ubuntu/
          scp -i ~/.ssh/aws_key system.config.js ${{ secrets.USERNAME }}@${{ secrets.HOST }}:/home/ubuntu/

      - name: ec2 npm install
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.AWS_SECRET_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            cd ~
            ls
            pwd
            npm install

      - name: deploy to ec2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.AWS_SECRET_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            cd ~
            pm2 reload system.config.js
        

